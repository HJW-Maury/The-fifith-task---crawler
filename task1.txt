#include<iostream>
#include<algorithm>
#include<opencv2\core.hpp>
#include<opencv2\highgui.hpp>
#include<opencv2\imgproc.hpp>
using namespace cv;
using namespace std;
Mat srcimg;
int Value = 3;

Mat getgausssian(int n, double sigma)
{
	int x, y, t = 0;
	double m1, m2, sum = 0;
	double zhi = -1 / (2 * sigma*sigma);
	double xi = 1 / (2 * sigma*sigma*3.14159);
	Mat gausssian(n, n, CV_64FC1);
	if (sigma <= 0)
		sigma = 0.3 *((n - 1) *0.5 - 1) + 0.8;
	for (x = 0, m1 = x - (n - 1) / 2; x < n; x++, m1++)
	{
		for (y = 0, m2 = y + (n - 1) / 2; y < n; y++, m2--)
		{
			gausssian.at<double>(x, y) = (double)exp(zhi*(m1*m1 + m2 * m2));
		}
	}
	for (x = 0, m1 = x - (n - 1) / 2; x < n; x++, m1++)
	{
		for (y = 0, m2 = y + (n - 1) / 2; y < n; y++, m2--, t++)
		{
			sum += gausssian.at<double>(x, y);
		}
	}
	for (x = 0, m1 = x - (n - 1) / 2; x < n; x++, m1++)
	{
		for (y = 0, m2 = y + (n - 1) / 2; y < n; y++, m2--, t++)
		{
			gausssian.at<double>(x, y) /= sum;
		}
	}
	return gausssian;
}

void gausssianFilter(Mat src, Mat & dst, Size ksize, double sigmaX, double sigmaY = 0)
{
	int n = ksize.width;
	int channel = src.channels();
	if (sigmaX <= 0 && sigmaY <= 0)
	{
		sigmaX = 0.3 *((ksize.width - 1) *0.5 - 1) + 0.8;
		sigmaY = 0.3 *((ksize.height - 1) *0.5 - 1) + 0.8;
	}
	Mat gausssian = getgausssian(n, sigmaX);
	copyMakeBorder(src, src, 0, n-1, 0, n-1, BORDER_REFLECT_101);
	int dst_w = src.cols - ksize.width + 1;               
	int dst_h = src.rows - ksize.height + 1;               
	for (int m = 0; m < channel; m++)
	{
		for (int i = 0; i < dst_h; i = i++)
		{
			for (int j = 0; j < dst_w; j = j++)
			{
				double g = 0;
				for (int z = 0; z < ksize.height; z++)
				{
					for (int q = 0; q < ksize.width; q++)
					{
						g += src.at<Vec3b>(z + i, q + j)[m] * gausssian.at<double>(z, q); 
 //图像变暗是因为int数据丢失了太多微小数据
					}
				}
				dst.at<Vec3b>(i, j)[m] = g;
			}
		}
	}
}

int main()
{
	srcimg = imread("C:\\Users\\DELL\\Desktop\\tu1.png");
	Mat dstimg(Size(srcimg.cols, srcimg.rows), srcimg.type(), Scalar(0));
	Mat dst666;
	gausssianFilter(srcimg, dstimg, Size(Value * 2 + 1, Value * 2 + 1), 0, 0);
	GaussianBlur(srcimg, dst666, Size(Value * 2 + 1, Value * 2 + 1), 0, 0);
	imshow("原图", srcimg);
	imshow("已知核半径的高斯滤波图", dstimg);
	imshow("原函数的图", dst666);
	waitKey(0);
	return 0;
}
